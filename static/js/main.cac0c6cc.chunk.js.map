{"version":3,"sources":["components/processinput/ProcessInput.tsx","components/processrenderer/ProcessRenderer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ProcessInput","props","useState","processString","setProcessString","selectedProcess","setSelectedProcess","selectedAlgorithm","setSelectedAlgorithm","onRadioClick","event","target","value","onAlgorithmClick","onSubmit","onSubmitted","preventDefault","type","pattern","onChange","className","name","checked","ProcessRenderer","processElements","setProcessElements","processColors","P1","P2","P3","P4","P5","P6","P7","useEffect","totalTime","processes","reduce","acc","process","duration","timeAtHand","elements","map","processColor","timeAtHandString","working","label","style","width","background","key","Math","random","displayed","waitingTime","FCFS","processList","PID","currentTime","forEach","arrival","executionTime","waitingDuration","push","LVL2FCFS","finalRenderedProcesses","highPriorityRemaining","lowPriorityRemaining","length","highPriorityProcessIndex","findIndex","toFind","lowPriorityProcessIndex","highPriorityProcess","splice","lowPriorityProcess","highPriorityProcessDuringLowPriorityIndex","highPriorityProcessDuringLowPriority","lowPriorityRunningTime","SJF","processesRemaining","processAtHandIndex","index","i","RR4","foundProcessToRun","sort","a","b","console","log","processDuration","min","calculateWaitingTime","processArrivals","processDurations","processEndedTime","reverseTime","reverse","undefined","waitingTimeSum","Object","keys","abs","App","processSchedulingAlgorithm","setProcessSchedulingAlgorithm","processDisplayed","setProcessDisplayed","renderedProcesses","setRenderedProcesses","setWaitingTime","intermediaryProcessString","slice","split","token","strings","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cac0c6cc.chunk.js","sourcesContent":["import React, {ChangeEvent, FormEvent} from 'react';\nimport { FunctionComponent, useState } from 'react';\nimport './ProcessInput.css';\nimport {ProcessSchedulingAlgorithm} from \"../../App\";\n\nconst ProcessInput: FunctionComponent<\n  {\n    onSubmitted: (process: string, type: ProcessSchedulingAlgorithm) => void\n  }> = (props) => {\n\n  const [processString, setProcessString] = useState('');\n  const [selectedProcess, setSelectedProcess] = useState<'1' | '2' | '3' | ''>('');\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<ProcessSchedulingAlgorithm>('FCFS');\n\n\n  const onInput = (event: ChangeEvent) => {\n    setSelectedProcess('');\n    setProcessString((event.target as HTMLInputElement).value);\n  };\n\n  const onRadioClick = (event: ChangeEvent) => {\n    const values = {\n      '1': '0,7;1,5;2,3;3,1;4,2;5,1',\n      '2': '0,2;0,4;12,4;15,5;21,10',\n      '3': '0,4;1,5;2,2;3,1;4,6;6,3',\n    };\n\n    setSelectedProcess(((event.target as HTMLInputElement).value as '1' | '2' | '3'));\n    setProcessString(values[((event.target as HTMLInputElement).value as '1' | '2' | '3')]);\n  };\n\n  const onAlgorithmClick = (event: ChangeEvent) => {\n    setSelectedAlgorithm((event.target as HTMLInputElement).value as ProcessSchedulingAlgorithm);\n  };\n\n  const onSubmit = (event: FormEvent) => {\n    props.onSubmitted(processString, selectedAlgorithm);\n    event.preventDefault();\n  };\n\n\n  return (\n    <form onSubmit={onSubmit}>\n      <h1>OS kodutöö 1, protsessoriaja planeerimine ja visualisatsioon</h1>\n\n      <h3>Testmuster: </h3>\n      <input type=\"text\"\n             pattern=\"^((\\d+,\\d+;?){1,12})$\"\n             value={processString}\n             onChange={onInput}/>\n\n      <div className=\"radio-container\">\n        <div>\n          <label>\n          <input type=\"radio\"\n                 value='1'\n                 name='first'\n                 checked={selectedProcess === '1'}\n                 onChange={onRadioClick}/>\n          Esimene näidismuster</label>\n        </div>\n        <div>\n          <label>\n          <input type=\"radio\"\n                 value='2'\n                 name='second'\n                 checked={selectedProcess === '2'}\n\n                 onChange={onRadioClick}/>\n          Teine näidismuster</label>\n        </div>\n        <div>\n          <label>\n          <input type=\"radio\"\n                 value='3'\n                 name='third'\n                 checked={selectedProcess === '3'}\n                 onChange={onRadioClick}/>\n          Kolmas näidismuster\n          </label>\n        </div>\n      </div>\n\n      <div className=\"radio-container\">\n        <div>\n          <label>\n            <input type=\"radio\"\n                   value='FCFS'\n                   name='FCFS'\n                   checked={selectedAlgorithm === 'FCFS'}\n                   onChange={onAlgorithmClick}/>\n            FCFS</label>\n        </div>\n        <div>\n          <label>\n            <input type=\"radio\"\n                   value='SJF'\n                   name='SJF'\n                   checked={selectedAlgorithm === 'SJF'}\n                   onChange={onAlgorithmClick}/>\n            SRTF</label>\n        </div>\n        <div>\n          <label>\n            <input type=\"radio\"\n                   value='2-level FCFS'\n                   name='2-level FCFS'\n                   checked={selectedAlgorithm === '2-level FCFS'}\n                   onChange={onAlgorithmClick}/>\n            2-level FCFS</label>\n        </div>\n        <div>\n          <label>\n            <input type=\"radio\"\n                   value='RR4'\n                   name='RR4'\n                   checked={selectedAlgorithm === 'RR4'}\n                   onChange={onAlgorithmClick}/>\n            RR4</label>\n        </div>\n      </div>\n\n      <button type=\"submit\">Näita protsesside visualisatsiooni</button>\n    </form>\n  )\n};\n\nexport default ProcessInput;","import React, {ChangeEvent, FormEvent, useEffect} from 'react';\nimport { FunctionComponent, useState } from 'react';\nimport './ProcessRenderer.css';\nimport { RenderedProcess } from '../../App';\n\n\nconst ProcessRenderer: FunctionComponent<{displayed: boolean; processes:RenderedProcess[]; waitingTime: number}> = (props) => {\n  const [processElements, setProcessElements] = useState<JSX.Element[]>([]);\n\n  const processColors: { [key:string]: string} = {\n    P1: '#FFEE58',\n    P2: '#F48FB1',\n    P3: '#9575CD',\n    P4: '#42A5F5',\n    P5: '#26A69A',\n    P6: '#FF9800',\n    P7: '#90A4AE'\n  };\n\n  useEffect(() => {\n    const totalTime = props.processes.reduce((acc, process) => acc + process.duration, 0);\n\n    let timeAtHand = 0;\n\n    const elements: JSX.Element[] = props.processes.map((process) => {\n      let processColor;\n      let timeAtHandString = `${timeAtHand} - ${timeAtHand + process.duration}`;\n      timeAtHand += process.duration;\n\n      if (!process.working) {\n        processColor = 'white';\n      } else {\n        if (process.label && processColors[process.label]) {\n          processColor = processColors[process.label];\n        } else {\n          processColor = 'red';\n        }\n      }\n      const style = {\n        width: `${(process.duration / totalTime)*100}%`,\n        background: processColor,\n      };\n\n      return (\n        <div className='process'\n             style={style}\n             key={Math.random() * 20000}>\n          {process.label ? process.label : ' '} {process.label ? ':' : ''} { process.duration }\n          <div className='process-from-to'>{ process.working ? timeAtHandString  : ''}</div>\n        </div>\n      );\n    });\n\n\n    setProcessElements(\n      elements\n    );\n\n  }, [props.processes]);\n\n  if (!props.displayed) {\n    return (<div className='process-missing-message'>Vali ülevalt näidismuster, või sisesta enda oma. Siis vali algoritm, ja vajuta nupule. Ooteaeg ja protsessivisualisatsioon ilmub siia</div>)\n  }\n\n  return (\n    <div className='rendered-processes-container'>\n      <span>Ooteaeg: {props.waitingTime}</span>\n      <div className='rendered-processes'>\n        {processElements}\n      </div>\n    </div>)\n}\n\nexport default ProcessRenderer;","import React, {useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ProcessInput from './components/processinput/ProcessInput';\nimport ProcessRenderer from \"./components/processrenderer/ProcessRenderer\";\n\nconst App: React.FC = () => {\n  const [processString, setProcessString] = useState('');\n  const [processSchedulingAlgorithm, setProcessSchedulingAlgorithm] = useState('');\n  const [processDisplayed, setProcessDisplayed] = useState(false);\n  const [renderedProcesses, setRenderedProcesses] = useState<RenderedProcess[]>([]);\n  const [waitingTime, setWaitingTime] = useState<number>(0);\n\n  const handleSubmit = (processString: string, selectedAlgorithm: ProcessSchedulingAlgorithm) => {\n    setProcessSchedulingAlgorithm(selectedAlgorithm);\n    setProcessString(processString);\n    setProcessDisplayed(true);\n  };\n\n  // when processString or processSchedulingAlgo changes, rerender\n  useEffect(() => {\n    let intermediaryProcessString = processString;\n    if (intermediaryProcessString[intermediaryProcessString.length - 1] === ';') {\n      intermediaryProcessString = intermediaryProcessString.slice(0, intermediaryProcessString.length - 1);\n    }\n\n    const processList = intermediaryProcessString.split(';')\n      .map(token => token.split(','))\n      .map(strings => [parseInt(strings[0]), parseInt(strings[1])]);\n\n    if (processSchedulingAlgorithm === 'FCFS') {\n      setRenderedProcesses(FCFS(processList));\n    }\n\n    if (processSchedulingAlgorithm === 'SJF') {\n      setRenderedProcesses(SJF(processList));\n    }\n\n    if (processSchedulingAlgorithm === 'RR4') {\n      setRenderedProcesses(RR4(processList));\n    }\n\n    if (processSchedulingAlgorithm === '2-level FCFS') {\n      setRenderedProcesses(LVL2FCFS(processList));\n    }\n\n  }, [processString, processSchedulingAlgorithm]);\n\n  useEffect(() => {\n    setWaitingTime(calculateWaitingTime(renderedProcesses));\n  }, [renderedProcesses]);\n\n  return (\n    <div className=\"App\">\n      <ProcessInput onSubmitted={handleSubmit}/>\n      <ProcessRenderer displayed={processDisplayed} processes={renderedProcesses} waitingTime={waitingTime}/>\n    </div>\n  );\n};\n\n\nconst FCFS = (processList: number[][]): RenderedProcess[] => {\n  const processes: RenderedProcess[] = [];\n\n  let PID = 0;\n  let currentTime = 0;\n\n  processList.forEach((process) => {\n    PID++;\n\n    const arrival = process[0];\n    const executionTime = process[1];\n\n    // add empty time in between\n\n    if (arrival > currentTime) {\n      const waitingDuration = arrival - currentTime;\n      processes.push({\n        working: false,\n        duration: waitingDuration,\n      });\n\n      currentTime += waitingDuration;\n\n    }\n\n    processes.push({\n      working: true,\n      label: `P${PID}`,\n      duration: executionTime,\n      arrival: arrival,\n    });\n\n    // time advanced by x\n    currentTime += executionTime;\n  });\n\n  return processes;\n};\n\nconst LVL2FCFS = (processList: number[][]): RenderedProcess[] => {\n  const finalRenderedProcesses: RenderedProcess[] = [];\n\n  let PID = 0;\n  let highPriorityRemaining: RenderedProcess[] = [];\n  let lowPriorityRemaining: RenderedProcess[] = [];\n\n  processList.forEach((process) => {\n    PID++;\n    const arrival = process[0];\n    const duration = process[1];\n\n    if (duration <= 5) {\n      highPriorityRemaining.push({\n        arrival,\n        duration,\n        working: true,\n        label: `P${PID}`,\n      });\n    } else {\n      lowPriorityRemaining.push({\n        arrival,\n        duration,\n        working: true,\n        label: `P${PID}`,\n      });\n    }\n  });\n\n  let currentTime = 0;\n  while(highPriorityRemaining.length + lowPriorityRemaining.length !== 0) {\n\n    // @ts-ignore\n    const highPriorityProcessIndex = highPriorityRemaining.findIndex(toFind => toFind.arrival <= currentTime);\n    // @ts-ignore\n    const lowPriorityProcessIndex = lowPriorityRemaining.findIndex(toFind => toFind.arrival <= currentTime);\n\n    if (highPriorityProcessIndex !== -1) {\n      const highPriorityProcess = highPriorityRemaining[highPriorityProcessIndex];\n      finalRenderedProcesses.push({\n        duration: highPriorityProcess.duration,\n        working: true,\n        label: highPriorityProcess.label,\n        arrival: highPriorityProcess.arrival,\n      });\n      currentTime += highPriorityProcess.duration;\n\n      highPriorityRemaining.splice(highPriorityProcessIndex, 1);\n    } else if (highPriorityProcessIndex === -1 && lowPriorityProcessIndex === -1) {\n      finalRenderedProcesses.push({\n        duration: 1,\n        working: false,\n      });\n      currentTime++;\n    }\n\n    if (lowPriorityProcessIndex !== -1 && highPriorityProcessIndex === -1) {\n      const lowPriorityProcess = lowPriorityRemaining[lowPriorityProcessIndex];\n      // @ts-ignore\n      const highPriorityProcessDuringLowPriorityIndex = highPriorityRemaining.findIndex(process => process.arrival <= currentTime + lowPriorityProcess.duration);\n\n      if (highPriorityProcessDuringLowPriorityIndex !== -1) {\n        const highPriorityProcessDuringLowPriority = highPriorityRemaining[highPriorityProcessDuringLowPriorityIndex];\n\n        // @ts-ignore\n        const lowPriorityRunningTime = highPriorityProcessDuringLowPriority.arrival - currentTime;\n\n        finalRenderedProcesses.push({\n          duration: lowPriorityRunningTime,\n          working: true,\n          label: lowPriorityProcess.label,\n          arrival: lowPriorityProcess.arrival,\n        });\n\n        finalRenderedProcesses.push({\n          duration: highPriorityProcessDuringLowPriority.duration,\n          working: true,\n          label: highPriorityProcessDuringLowPriority.label,\n          arrival: highPriorityProcessDuringLowPriority.arrival,\n        });\n        highPriorityRemaining.splice(highPriorityProcessDuringLowPriorityIndex, 1);\n\n\n        lowPriorityRemaining[lowPriorityProcessIndex].duration = lowPriorityProcess.duration - lowPriorityRunningTime;\n\n        currentTime += lowPriorityRunningTime + highPriorityProcessDuringLowPriority.duration;\n      } else {\n        finalRenderedProcesses.push({\n          duration: lowPriorityProcess.duration,\n          working: true,\n          label: lowPriorityProcess.label,\n          arrival: lowPriorityProcess.arrival,\n        });\n        currentTime += lowPriorityProcess.duration;\n        lowPriorityRemaining.splice(lowPriorityProcessIndex, 1);\n      }\n\n\n    }\n  }\n  return finalRenderedProcesses;\n};\n\nconst SJF = (processList: number[][]): RenderedProcess[] => {\n  const finalRenderedProcesses: RenderedProcess[] = [];\n\n  let PID = 0;\n  let processesRemaining: RenderedProcess[] = [];\n\n  processList.forEach((process) => {\n    PID++;\n    const arrival = process[0];\n    const duration = process[1];\n\n    processesRemaining.push({\n      arrival,\n      duration,\n      working: true,\n      label: `P${PID}`,\n    });\n  });\n\n\n  let currentTime = 0;\n  // @ts-ignore\n  let processAtHandIndex: number = 0;\n\n  processesRemaining.forEach((process, index) => {\n    // @ts-ignore\n    if (processesRemaining[processAtHandIndex].duration > process.duration && processesRemaining[index].arrival <= currentTime) {\n      processAtHandIndex = index;\n    }\n  });\n\n  while(processesRemaining.length !== 0) {\n    processesRemaining.forEach((process, index) => {\n      if (processesRemaining[processAtHandIndex]) {\n        // @ts-ignore\n        if (processesRemaining[processAtHandIndex].duration > process.duration && processesRemaining[index].arrival <= currentTime){\n          processAtHandIndex = index;\n        }\n      } else {\n        // @ts-ignore\n        if (processesRemaining[index].arrival <= currentTime) {\n          processAtHandIndex = index;\n        }\n      }\n    });\n\n    if (processAtHandIndex !== -1) {\n      finalRenderedProcesses.push({\n        duration: 1,\n        working: true,\n        arrival: processesRemaining[processAtHandIndex].arrival,\n        label: processesRemaining[processAtHandIndex].label\n      });\n\n      processesRemaining[processAtHandIndex].duration -= 1;\n      if (processesRemaining[processAtHandIndex].duration === 0) {\n        processesRemaining.splice(processAtHandIndex, 1);\n        processAtHandIndex = -1;\n      }\n    } else {\n      finalRenderedProcesses.push({\n        duration: 1,\n        working: false,\n      });\n    }\n\n    currentTime++;\n  }\n\n  for(let i = 0; i < finalRenderedProcesses.length - 1; i++) {\n    for (let i = 0; i < finalRenderedProcesses.length - 1; i++) {\n      if (finalRenderedProcesses[i].label === finalRenderedProcesses[i + 1].label) {\n        finalRenderedProcesses[i].duration += finalRenderedProcesses[i + 1].duration;\n        finalRenderedProcesses.splice(i + 1, 1);\n      }\n    }\n  }\n  return finalRenderedProcesses;\n};\n\n\n\nconst RR4 = (processList: number[][]): RenderedProcess[] => {\n  const INTERVAL = 4;\n  const finalRenderedProcesses: RenderedProcess[] = [];\n\n  let PID = 0;\n  let processesRemaining: RenderedProcess[] = [];\n\n  processList.forEach((process) => {\n    PID++;\n    const arrival = process[0];\n    const duration = process[1];\n\n    processesRemaining.push({\n      arrival,\n      duration,\n      working: true,\n      label: `P${PID}`,\n    });\n  });\n\n  let currentTime = 0;\n\n  if (processesRemaining[0].arrival !== 0) {\n    finalRenderedProcesses.push({\n      duration: processesRemaining[0].arrival ? processesRemaining[0].arrival : 0,\n      working: false,\n    })\n  }\n\n\n  while(processesRemaining.length !== 0) {\n    let foundProcessToRun = false;\n    // @ts-ignore\n    processesRemaining.sort((a,b) => {\n      // @ts-ignore\n      return b.arrival - a.arrival;\n    });\n\n    processesRemaining\n      // @ts-ignore\n      .forEach((process, index) => {\n        console.log(process.label);\n      // @ts-ignore\n      if (process.arrival <= currentTime && !foundProcessToRun) {\n        console.log(process.arrival, currentTime);\n        foundProcessToRun = true;\n        const processDuration = Math.min(INTERVAL, process.duration);\n\n        finalRenderedProcesses.push({\n          duration: processDuration,\n          working: true,\n          label: process.label,\n          arrival: process.arrival,\n        });\n\n        process.duration = process.duration - processDuration;\n        currentTime += processDuration;\n\n        if (process.duration <= 0) {\n          processesRemaining.splice(index, 1);\n        }\n      }\n    });\n\n    if (!foundProcessToRun) {\n      currentTime += 1;\n      finalRenderedProcesses.push({\n        duration: 1,\n        working: false,\n      });\n    }\n  }\n  return finalRenderedProcesses;\n};\n\n\nconst calculateWaitingTime = (processes: RenderedProcess[]): number => {\n  console.log(processes);\n  const processArrivals: {[key: string]: number} = {};\n  const processDurations: {[key: string]: number} = {};\n  const processEndedTime: {[key: string]: number} = {};\n\n\n  let currentTime = 0;\n  processes.forEach((process, index) => {\n    if (process.label) {\n      // @ts-ignore\n      processArrivals[process.label] = process.arrival;\n      processDurations[process.label] = process.duration;\n    }\n    currentTime += process.duration;\n  });\n\n  let reverseTime = 0;\n  [...processes].reverse().forEach((process, index) => {\n\n    // @ts-ignore\n    if (process.label && processEndedTime[process.label] === undefined) {\n      // @ts-ignore\n      processEndedTime[process.label] = currentTime - reverseTime;\n    }\n    reverseTime += process.duration;\n  });\n\n  let waitingTimeSum = 0;\n\n  Object.keys(processArrivals).forEach((key) => {\n    waitingTimeSum += Math.abs( processDurations[key] + processArrivals[key] - processEndedTime[key]);\n  });\n\n  return waitingTimeSum / Object.keys(processArrivals).length;\n};\n\nexport default App;\n\nexport interface RenderedProcess {\n  working: boolean;\n  duration: number;\n  label?: string;\n  arrival?: number;\n}\n\nexport type ProcessSchedulingAlgorithm = 'FCFS' | 'SJF' | '2-level FCFS' | 'RR4';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}